
df.drop_duplicates(Keep ='first') 保存重复的第一行


## 缺省值的处理
df["column"] = df["column"].replace("xxx",np.NaN).replace("xxx",np.NaN) 替换xxx为NaN（null）如一次替换多个值，可多加replace函数
然后再将NaN替换为median or mean or 0
df["column"].fillna(df["column"].mean, inplace = True)
df.fillna(method = 'bfill/ffill, axis =0/1)
df["column"]  = df["column"].round(2)对小数四舍五入保留两位

##删除空值
方法一： df.dropna(axis = 0/1)
方法二： df.isnull.any(axis = 1) 那些行存在Nan
        df.loc(df.isnull.any(axis = 1) )true行对应的行数据
        drop_index = df.loc(df.isnull.any(axis = 1) ).index
        df.drop(labels = drop_index, axis = 0) 
        
##异常值的处
abnormal = df['column'].std()*3
~(df['column']-df['column'].mean()>abnormal) ~取反
df.loc(~(df['column']-df['column'].mean()>abnormal) 清除了异常值

 
        
数据处理后，检测完整性


## 字符串的拆分
df["columnN"] = df["column"].apply(lambda x: str(x)[0:10] 多加一列columnN，内容为column的从1到9的字符

df['res']=pd.to_numeric(df['res'],'coerce')
coerce是将不能转为数字类型的都变成NaN，其他两个是ignore：忽略，也就是不转换，raise：报错 默认是raise 
重新索引：
df=df.reset_index(drop=True)
注意这里不能用reindex，而且后面要加上 drop=Ture,不然原来的index还是会保留着
